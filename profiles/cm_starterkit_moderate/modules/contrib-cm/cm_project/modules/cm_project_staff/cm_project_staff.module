<?php

/**
 * @file
 * cm_project_staff functions
 */

/**
 * Implements hook_menu().
 */
function cm_project_staff_menu() {
  $items = array();

  if (module_exists('civicrm')) {
    $items['user/autocompletecivi'] = array(
      'title' => 'User autocomplete',
      'page callback' => 'cm_project_staff_autocomplete',
      'access callback' => 'user_access',
      'access arguments' => array('access user profiles'),
      'type' => MENU_CALLBACK,
    );
  }
  
 $items['admin/config/communitymedia/project/staff'] = array(
    'title' => 'Staff Settings',
    'description' => 'Configuration options for the Community Media Project.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_project_staff_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Builds the cm_project admininstration settings form.
 */
function cm_project_staff_admin_settings($form, &$form_state) {
  $form = array();

  $form['cm_project_staff_rename_author'] = array(
    '#type' => 'textfield',
    '#title' => t('Rename default Author field label to'),
    '#default_value' => variable_get('cm_project_staff_rename_author', 'Executive Producer'),
    '#description' => t('Common labels include Member Sponsoring Program, Project Manager, Primary Producer'),
  );
  
  $form['cm_project_staff_author_field_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Author Field Description'),
    '#default_value' => variable_get('cm_project_staff_author_field_description', 'Additional producers/members can only be added after the project is Active'),
    '#description' => t(''),
  );
    
  return system_settings_form($form);
}

/**
 * Implements hook_node_form_alter().
 */
function cm_project_staff_form_cm_project_node_form_alter(&$form, &$form_state) {
  if (user_access('edit any cm_project content')) {

    if (isset($form_state['node'])) {
      $node = (array) $form_state['node'] + (array) $form['#node'];
    }
    else {
      $node = $form['#node'];
    }
    $node = (object) $node;
    // Move the author field and set autocomplete and ahah handlers.
    // We do this here and not in after_build because the ahah hash is handled before after_build is called.
    $form['name'] = $form['author']['name'];
    $form['name']['#title'] = variable_get('cm_project_staff_rename_author', 'Project Owner');
    $form['name']['#weight'] = -99;
    $form['name']['#description'] = variable_get('cm_project_staff_author_field_description', 'Additional producers/members can only be added after the project is Active');
    if (module_exists('civicrm')) {
      $form['name']['#autocomplete_path'] = 'user/autocompletecivi';
    }
    //$form['name']['#ajax'] = array(
      //'path' => 'reservationsstaff/updatename',
      //'wrapper' => 'edit-og-groups-wrapper',
      //'callback' => 'cm_project_staff_update_name',
      //'wrapper' => 'reservations-staff-edit-form-wrapper',
      //'method' => 'replace',
      //'effect' => 'fade',
    //);

    unset($form['author']['name']);

    $form['#prefix'] = '<div id="reservations-staff-edit-form-wrapper">';
    $form['#suffix'] = '</div>';
  }
}



/**
 * Menu callback; Retrieve a JSON object containing autocomplete suggestions for existing users.
 */
function cm_project_staff_autocomplete($string = '') {
  $matches = array();
  if ($string) {

    if ( ! civicrm_initialize( ) ) {
      return;
    }
    $fields = field_info_fields();
    $field = $fields[$field_name];
    $matches = array();

    $references = _cm_project_staff_potential_references($field, $string);
    foreach ($references as $id => $row) {
      // Add a class wrapper for a few required CSS overrides.
      $matches["{$row['title']}"] = '<div class="reference-autocomplete">' . $row['rendered'] . '</div>';
    }
  }
  drupal_json_output($matches);
}

/**
 * Menu callback for AHAH additions.
 */
function cm_project_staff_update_name($form, $form_state) {
  return $form;
}

function _cm_project_staff_potential_references($field, $string = '', $exact_string = FALSE) {
  static $results = array();

  $references = _cm_project_staff_potential_references_standard($field, $string, $exact_string);

  // Store the results.
  $results[$field['field_name']][$string][$exact_string] = $references;

  return $results[$field['field_name']][$string][$exact_string];
}

/**
 * Helper function for _civicrm_cck_potential_references():
 * referenceable nodes defined by content types.
 */
function _cm_project_staff_potential_references_standard( $field, $string = '', $exact_string = FALSE, $limit = '10' ) {

  $args = $whereClause = $contactTypes = $contactSubTypes = array();

  if ( ! civicrm_initialize( ) ) {
    return;
  }
  global $civicrm_root;

  require_once $civicrm_root . '/CRM/Contact/BAO/ContactType.php';
  require_once $civicrm_root . '/CRM/Core/BAO/UFMatch.php';
  $basicTypes = CRM_Contact_BAO_ContactType::basicTypePairs( );

  foreach ( $basicTypes as $name => $label ) {
    if ( is_array( $field[$name] ) ) {
      $contactNames = array_filter( $field[$name] );
      if ( !empty( $contactNames ) ) {
        if ( in_array( $name, $contactNames ) ) {
          $contactTypes[] = $name;
        }
        else {
          $contactSubTypes = array_merge( $contactSubTypes, array_keys( $contactNames ) );
        }
      }
    }
  }

  if ( !empty( $contactTypes ) ) {
    $contactTypes  = implode( "','", $contactTypes );
    $whereClause[] = "contact_type IN ( '{$contactTypes}' )";
  }

  if ( !empty( $contactSubTypes ) ) {
    $contactSubTypes = implode( "','", $contactSubTypes );
    $whereClause[]   = "contact_sub_type IN ( '{$contactSubTypes}' )";
  }

  $whereClause = empty( $whereClause ) ? '' : '(' . implode( ' OR ', $whereClause ) . ') AND';
  $related_clause = "";

  if (isset($string)) {
    if ($exact_string) {
      $string_clause = " AND display_name = %1";
      $args[] = $string;
    }
    else {
      $string_clause = " AND display_name LIKE %1";
      $args[] = "%%" . $string . "%";
    }
  }

  $q = "
    SELECT civicrm_contact.id, display_name
    FROM civicrm_contact
    JOIN civicrm_uf_match ON civicrm_contact.id = civicrm_uf_match.contact_id
    WHERE $whereClause
    display_name IS NOT NULL
    AND display_name NOT LIKE ''
    AND display_name NOT LIKE '<Last>%%'
    AND display_name NOT LIKE '%@%%'
    AND display_name NOT LIKE '--%%'
    AND display_name NOT LIKE '- -%%'
    AND display_name NOT LIKE ',%%'
    AND display_name NOT LIKE '..%%'
    " . $string_clause . " LIMIT $limit";
  $params = array(1 => array($args[0], "String"));
  $dao = CRM_Core_DAO::executeQuery( $q, $params );

  $references = array();
  while ($dao->fetch()) {
    $uid = CRM_Core_BAO_UFMatch::getUFId($dao->id);
    $username = db_query("SELECT name FROM {users} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
    $references[$dao->id] = array(
      'title' => $username,
      'rendered' => $dao->display_name,
    );
  }

  return $references;
}

